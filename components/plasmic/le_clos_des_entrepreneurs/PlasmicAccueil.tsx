// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nAndgS4Veydq6N5LKAnva3
// Component: ENWCjf3W8md_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ArrowBottom from "../../ArrowBottom"; // plasmic-import: Qzdt7emJbQ8f/component
import Cartouche from "../../Cartouche"; // plasmic-import: 1dZS535PDilA/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: nAndgS4Veydq6N5LKAnva3/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: ENWCjf3W8md_/css

import IconsArrowTopRightsvgIcon from "./icons/PlasmicIcon__IconsArrowTopRightsvg"; // plasmic-import: 9izSBVTKLL0H/icon

createPlasmicElementProxy;

export type PlasmicAccueil__VariantMembers = {};
export type PlasmicAccueil__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>();

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  main?: Flex__<"div">;
  hero?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  arrowBottom?: Flex__<typeof ArrowBottom>;
  sectionAbout?: Flex__<"section">;
  sectionObjectifs?: Flex__<"section">;
  cartouches?: Flex__<"div">;
  sectionReserver?: Flex__<"section">;
  embedHtml?: Flex__<typeof Embed>;
  card?: Flex__<"section">;
  svg?: Flex__<"svg">;
  footer?: Flex__<"section">;
};

export interface DefaultAccueilProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.main
          )}
        >
          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___0Rcsd)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"40%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/le_clos_des_entrepreneurs/images/logoClosIconpng.png",
                  fullWidth: 197,
                  fullHeight: 200,
                  aspectRatio: undefined
                }}
              />

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__wtOe
                )}
              >
                {"Clos des \nentrepreneurs"}
              </h1>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zRsIl)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iRr7U
                )}
              >
                {"R\u00e9server le local"}
              </div>
              <ArrowBottom
                data-plasmic-name={"arrowBottom"}
                data-plasmic-override={overrides.arrowBottom}
                className={classNames("__wab_instance", sty.arrowBottom)}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__r01F6)} />
          </section>
          <section
            data-plasmic-name={"sectionAbout"}
            data-plasmic-override={overrides.sectionAbout}
            className={classNames(projectcss.all, sty.sectionAbout, "Card")}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__xRee3
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__h1Sxm
                    )}
                  >
                    {"Le clos"}
                  </h2>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zcWia
              )}
            >
              {
                "Lorem ipsum dolor sit amet consectetur. Nisl viverra consequat ut fermentum eu. Sodales ultrices sed aliquam in. Arcu ultrices phasellus posuere dignissim quis elementum adipiscing habitant. Vestibulum mi dictum nisl risus tellus consectetur malesuada cum."
              }
            </div>
          </section>
          <section
            data-plasmic-name={"sectionObjectifs"}
            data-plasmic-override={overrides.sectionObjectifs}
            className={classNames(projectcss.all, sty.sectionObjectifs, "Card")}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__tl6Nt
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__v3Lie
                    )}
                  >
                    {"Nos objectifs"}
                  </h2>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1E0UM
              )}
            >
              {
                "Lorem ipsum dolor sit amet consectetur. Nisl viverra consequat ut fermentum eu. Sodales ultrices sed aliquam in. Arcu ultrices phasellus posuere dignissim quis elementum adipiscing habitant. Vestibulum mi dictum nisl risus tellus consectetur malesuada cum."
              }
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"cartouches"}
              data-plasmic-override={overrides.cartouches}
              hasGap={true}
              className={classNames(projectcss.all, sty.cartouches)}
            >
              <Cartouche
                className={classNames("__wab_instance", sty.cartouche__dEoLd)}
                content={"Objectif 1"}
              />

              <Cartouche
                className={classNames("__wab_instance", sty.cartouche__b6U7H)}
                content={"Objectif 2"}
              />

              <Cartouche
                className={classNames("__wab_instance", sty.cartouche__imyu)}
                content={"Objectif 3 avec plus de texte pour voir l'effet"}
              />
            </Stack__>
          </section>
          <section
            data-plasmic-name={"sectionReserver"}
            data-plasmic-override={overrides.sectionReserver}
            className={classNames(projectcss.all, sty.sectionReserver, "Card")}
          >
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<!-- D\u00e9but de widget de lien Calendly -->\r\n<link href="https://assets.calendly.com/assets/external/widget.css" rel="stylesheet">\r\n<script src="https://assets.calendly.com/assets/external/widget.js" type="text/javascript" async></script>\r\n<!-- Fin de widget de lien Calendly -->'
              }
            />

            <section
              data-plasmic-name={"card"}
              data-plasmic-override={overrides.card}
              className={classNames(projectcss.all, sty.card, "Card")}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            Calendly.initPopupWidget({
                              url: "https://calendly.com/cmasserey-_mrd"
                            });
                            return false;
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox___15B4W)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__qFMxb
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__hmwZi
                        )}
                      >
                        {"R\u00e9server"}
                      </h2>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </h1>
                <IconsArrowTopRightsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aJn48
                )}
              >
                {
                  "Lorem ipsum dolor sit amet consectetur. Nisl viverra consequat ut fermentum eu. Sodales ultrices sed aliquam in. Arcu ultrices phasellus posuere dignissim quis elementum adipiscing habitant. Vestibulum mi dictum nisl risus tellus consectetur malesuada cum."
                }
              </div>
            </section>
          </section>
          <section
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zwDA
              )}
            >
              {"Tous droits r\u00e9serv\u00e9s Le Clos des Entrepreneurs"}
            </div>
          </section>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "hero",
    "img",
    "arrowBottom",
    "sectionAbout",
    "sectionObjectifs",
    "cartouches",
    "sectionReserver",
    "embedHtml",
    "card",
    "svg",
    "footer"
  ],
  hero: ["hero", "img", "arrowBottom"],
  img: ["img"],
  arrowBottom: ["arrowBottom"],
  sectionAbout: ["sectionAbout"],
  sectionObjectifs: ["sectionObjectifs", "cartouches"],
  cartouches: ["cartouches"],
  sectionReserver: ["sectionReserver", "embedHtml", "card", "svg"],
  embedHtml: ["embedHtml"],
  card: ["card", "svg"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  main: "div";
  hero: "section";
  img: typeof PlasmicImg__;
  arrowBottom: typeof ArrowBottom;
  sectionAbout: "section";
  sectionObjectifs: "section";
  cartouches: "div";
  sectionReserver: "section";
  embedHtml: typeof Embed;
  card: "section";
  svg: "svg";
  footer: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccueil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    img: makeNodeComponent("img"),
    arrowBottom: makeNodeComponent("arrowBottom"),
    sectionAbout: makeNodeComponent("sectionAbout"),
    sectionObjectifs: makeNodeComponent("sectionObjectifs"),
    cartouches: makeNodeComponent("cartouches"),
    sectionReserver: makeNodeComponent("sectionReserver"),
    embedHtml: makeNodeComponent("embedHtml"),
    card: makeNodeComponent("card"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
